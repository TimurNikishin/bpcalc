name: CI-CD-Pipeline-to-AWS-ElasticBEanstalk
env:
  EB_PACKAGE_S3_BUCKET_NAME  :  "tn-tud-csd-ca1-bpcalc-packages"
  EB_APPLIACTION_NAME        :  "bpcalc-app"
  EB_ENVIRONMENT_NAME_QA     :  "bpcalc-app-qa-env"
  EB_ENVIRONMENT_NAME_BLUE   :  "bpcalc-app-blue-env"
  EB_ENVIRONMENT_NAME_GREEN  :  "bpcalc-app-green-env"
  AWS_REGION_NAME            :  "eu-west-1"
  DEPLOY_PACKAGE_NAME        :  "deploy.zip"
  APP_VERSION                :  "Ver-${{ github.sha }}"
  ENV_DOMAIN                 :  ""
  EB_STAGING_ENV             :  ""
  
on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  CI_part:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
    
    # - name: Dependency Review
    #   uses: actions/dependency-review-action@v3
    #   with:
    #     fail-on-severity: critical
    #     base-ref: refs/heads/main~1
    #     head-ref: refs/heads/main       
    
    # - name: Code Analysis with SonarCloud
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    # - name: Set up Python for Unit Testing
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: "3.9"   

    # - name: Install dependencies
    #   run: python -m pip install pytest flask

    # - name: Run Unit tests
    #   run: pytest

    - name: Build deployment package
      run : zip -r deploy.zip ./ -x *.git* "UnitTest/*" ".pytest*"
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Deployment_Package
        path: ${{ env.DEPLOY_PACKAGE_NAME }}
        retention-days: 5  

  CD_part_QA:
    runs-on: ubuntu-latest
    needs  : [CI_part]
    steps:

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: Deployment_Package

      - name: QA Deployment in AWS
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key:     ${{ secrets.TN_AWS_ACCESS_KEY }}
          aws_secret_key:     ${{ secrets.TN_AWS_SECRET_KEY }}
          region:             ${{ env.AWS_REGION_NAME }}
          application_name:   ${{ env.EB_APPLIACTION_NAME }}
          environment_name:   ${{ env.EB_ENVIRONMENT_NAME_QA }}
          version_label:      ${{ env.APP_VERSION }}
          deployment_package: ${{ env.DEPLOY_PACKAGE_NAME }}
    
  CD_part_Staging:
    runs-on: ubuntu-latest
    needs  : [CD_part_QA]

    steps:
      - name:
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id      :  ${{ secrets.TN_AWS_ACCESS_KEY }}
          aws-secret-access-key  :  ${{ secrets.TN_AWS_SECRET_KEY }}
          aws-region             :  ${{ env.AWS_REGION_NAME }}
      - name: Get Domain name for Green environment
        run: echo "ENV_DOMAIN = $(aws elasticbeanstalk describe-environments --environment-names ${{ env.EB_ENVIRONMENT_NAME_GREEN }} --query "Environments[0].CNAME" --output text)" >> $GITHUB_ENV
      
      - name: Define Elastic Beanstalk Staging environment
        run: |
             if [ ${{ env.ENV_DOMAIN }} == 'bpcalc-app-staging-env.eu-west-1.elasticbeanstalk.com' ]; then
               echo "EB_STAGING_ENV = ${{ env.EB_ENVIRONMENT_NAME_GREEN }}"
             else
               echo "EB_STAGING_ENV = ${{ env.EB_ENVIRONMENT_NAME_BLUE }}"
             fi
      

         
         
            
  
